Working through LeetCode's Algos study plan
JD Linares

278. First Bad Version
Easy

3746

1367

Add to List

Share
You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

 

Example 1:

Input: n = 5, bad = 4
Output: 4
Explanation:
call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true
Then 4 is the first bad version.
Example 2:

Input: n = 1, bad = 1
Output: 1
 

Constraints:

1 <= bad <= n <= 231 - 1
Accepted
795,059
Submissions
1,965,497


MYSOLUTION
# The isBadVersion API is already defined for you.
# @param version, an integer
# @return an integer
# def isBadVersion(version):

class Solution:
    def firstBadVersion(self, n):
        """
        :type n: int
        :rtype: int
        """
        
        if n==1:
            return 1
    
    # Using binary search
    # Edge cases
        # 1 item
    # Start case
        # reach 1
    # Define First bad
        # Prior was good
        # Prior was 0 is taken care of in edge cases
        # check 
    # Sample
    # 1 2 3 4 5 6 7 8 9 
    # n/counter = 4,3,2,1
    # 4 ->  
        counter = 2
        firstBad = n//counter
        while firstBad >=1:
            counter+=1
            if isBadVersion(firstBad):
                if firstBad == 1:
                    return firstBad
                if not isBadVersion(firstBad-1):
                    return firstBad
                else:
                    firstBad -= n // counter
            else: 
                if n // counter == 0:
                    firstBad = firstBad + 1
                else: 
                    firstBad += n // counter
                
Runtime: 28 ms, faster than 79.06% of Python3 online submissions for First Bad Version.
Memory Usage: 14.3 MB, less than 44.77% of Python3 online submissions for First Bad Version.            
                

LEARNED
	iterate through binary search
	edges:
		infinate loop with inc/dec == 0 
	Classic binary search uses left/right ranges that shrink

NOTES
	python3 has /= and //=
LEETSOLUTION
public int firstBadVersion(int n) {
    int left = 1;
    int right = n;
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (isBadVersion(mid)) {
            right = mid;
        } else {
            left = mid + 1;
        }
    }
    return left;
}




###
704. Binary Search
Easy

2958

83

Add to List

Share
Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4
Example 2:

Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1
 

Constraints:

1 <= nums.length <= 104
-104 < nums[i], target < 104
All the integers in nums are unique.
nums is sorted in ascending order.
Accepted
536,727
Submissions
984,363


MINE:
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        
        if len(nums)==1:
            if nums[0]==target:
                return 0
            else:
                return -1
        
        # 0 1
        # 0 1 2
        # 0 1 2 3
        
        #NOTE: Implemented so odds, high side gest the extra
        midPt = len(nums)//2
        if nums[midPt] > target:
            return Solution.search(self,nums[:midPt],target)
        else:
            returnIndex = Solution.search(self,nums[midPt:],target)
            if returnIndex == -1:
                return -1
            else:
                return len(nums[:midPt]) + returnIndex
            
LEARNED:
	Binary search may be faster iterative than recursive
	
NOTES:
	// floor division results in an integer
	: slicing goes from incuded start : exculded end

-1 0 3 5 9 12
9
3+1+0
LEETSOLUTION:
iclass Solution:
    def search(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums) - 1
        while left <= right:
            pivot = left + (right - left) // 2
            if nums[pivot] == target:
                return pivot
            if target < nums[pivot]:
                right = pivot - 1
            else:
                left = pivot + 1
        return -1


