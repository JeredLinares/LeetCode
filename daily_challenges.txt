My Solutions to the daily LeetCode challenges

Author: JD Linares
Created: 28 Dec 2021
Updated: Regularly


###
30Dec2021
1015. Smallest Integer Divisible by K
Medium

874

718

Add to List

Share
Given a positive integer k, you need to find the length of the smallest positive integer n such that n is divisible by k, and n only contains the digit 1.

Return the length of n. If there is no such n, return -1.

Note: n may not fit in a 64-bit signed integer.



Example 1:

Input: k = 1
Output: 1
Explanation: The smallest answer is n = 1, which has length 1.
Example 2:

Input: k = 2
Output: -1
Explanation: There is no such positive integer n divisible by 2.
Example 3:

Input: k = 3
Output: 3
Explanation: The smallest answer is n = 111, which has length 3.


Constraints:

1 <= k <= 105
Accepted
48,959
Submissions
105,169


**** to hard!




###
29 Dec 2021
You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.




"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Optional[Node]') -> 'Optional[Node]':
        if root == None:
            return root
        if root.left == None:
            return root
        
        still_working = True
        
        
        bfs = [root]
        while still_working:
            this_level = []
            for i in range(0,len(bfs)):
                this_level.append(bfs[i].left)
                this_level.append(bfs[i].right)
            
            for i in range(0,len(this_level)-1):
                this_level[i].next=this_level[i+1]
        
            if this_level[0].left == None:
                still_working = False
            bfs=this_level
        
        return root
            


Success
Details
Runtime: 64 ms, faster than 58.93% of Python3 online submissions for Populating Next Right Pointers in Each Node.
Memory Usage: 15.7 MB, less than 70.69% of Python3 online submissions for Populating Next Right Pointers in Each Node.
Next challenges:


LEARNED:
	python uses pass by object reference which is niether pass by value nor pass by reference
		mutable because important here
	Breath first search was easiest to do with a while loop
	BFS may be best executed with a while loop

NOTES:
	I wonder how to do bfs recursively and if it is straight forward





###
28 Dec 2021

Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
#        print(head)
        result = head
        counter = 1
        current_node = head
        # Iterate once to count the nodes
        while current_node.next != None:
            counter+=1
            current_node = current_node.next
        if counter==1:
            return result
        if counter % 2 == 0:
            for i in range(0,counter//2):
                result = result.next
            return result
        else:
            for i in range(0,counter//2):
                result = result.next
            return result


LEARNED: 
	You can trade memory for speed and ease.
	Making a list object and appending each "next" node allows you to get back to the half way point fast

NOTE: 
	[]: means list
		list is mutable, unlike strings
	You can reference the last item in a list with var[-1]
	You can append to a list with .append()
	len() returns length
	// is floor division
	% is modulo
	assign more than one at a time: var1 = var2 = 2
	





###
27 Dec 2021

The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.

For example, The integer 5 is "101" in binary and its complement is "010" which is the integer 2.
Given an integer num, return its complement.


class Solution:
    def findComplement(self, num: int) -> int:
        int_2 = format(num,'b')
        output_value = ''
        for char_val in int_2:
            if char_val == '0':
                output_value += '1'
            else:
                output_value += '0'
        return int(output_value,2)

LEARNED: 


